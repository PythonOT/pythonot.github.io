
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/domain-adaptation/plot_otda_classes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_domain-adaptation_plot_otda_classes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_domain-adaptation_plot_otda_classes.py:


========================
OT for domain adaptation
========================

This example introduces a domain adaptation in a 2D setting and the 4 OTDA
approaches currently supported in POT.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    # Authors: Remi Flamary <remi.flamary@unice.fr>
    #          Stanislas Chambon <stan.chambon@gmail.com>
    #
    # License: MIT License

    import matplotlib.pylab as pl
    import ot








.. GENERATED FROM PYTHON SOURCE LINES 21-23

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 23-31

.. code-block:: default


    n_source_samples = 150
    n_target_samples = 150

    Xs, ys = ot.datasets.make_data_classif('3gauss', n_source_samples)
    Xt, yt = ot.datasets.make_data_classif('3gauss2', n_target_samples)









.. GENERATED FROM PYTHON SOURCE LINES 32-34

Instantiate the different transport algorithms and fit them
-----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 34-59

.. code-block:: default


    # EMD Transport
    ot_emd = ot.da.EMDTransport()
    ot_emd.fit(Xs=Xs, Xt=Xt)

    # Sinkhorn Transport
    ot_sinkhorn = ot.da.SinkhornTransport(reg_e=1e-1)
    ot_sinkhorn.fit(Xs=Xs, Xt=Xt)

    # Sinkhorn Transport with Group lasso regularization
    ot_lpl1 = ot.da.SinkhornLpl1Transport(reg_e=1e-1, reg_cl=1e0)
    ot_lpl1.fit(Xs=Xs, ys=ys, Xt=Xt)

    # Sinkhorn Transport with Group lasso regularization l1l2
    ot_l1l2 = ot.da.SinkhornL1l2Transport(reg_e=1e-1, reg_cl=2e0, max_iter=20,
                                          verbose=True)
    ot_l1l2.fit(Xs=Xs, ys=ys, Xt=Xt)

    # transport source samples onto target samples
    transp_Xs_emd = ot_emd.transform(Xs=Xs)
    transp_Xs_sinkhorn = ot_sinkhorn.transform(Xs=Xs)
    transp_Xs_lpl1 = ot_lpl1.transform(Xs=Xs)
    transp_Xs_l1l2 = ot_l1l2.transform(Xs=Xs)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    It.  |Loss        |Relative loss|Absolute loss
    ------------------------------------------------
        0|1.035998e+01|0.000000e+00|0.000000e+00
        1|2.428422e+00|3.266138e+00|7.931562e+00
        2|2.174944e+00|1.165450e-01|2.534787e-01
        3|2.111837e+00|2.988253e-02|6.310702e-02
        4|2.089750e+00|1.056887e-02|2.208630e-02
        5|2.078860e+00|5.238609e-03|1.089033e-02
        6|2.071858e+00|3.379372e-03|7.001579e-03
        7|2.068234e+00|1.752221e-03|3.624005e-03
        8|2.064868e+00|1.630377e-03|3.366514e-03
        9|2.062412e+00|1.190621e-03|2.455551e-03
       10|2.059855e+00|1.241467e-03|2.557243e-03
       11|2.059196e+00|3.201657e-04|6.592839e-04
       12|2.057727e+00|7.137008e-04|1.468601e-03
       13|2.056763e+00|4.686218e-04|9.638442e-04
       14|2.056214e+00|2.671666e-04|5.493518e-04
       15|2.054504e+00|8.322376e-04|1.709836e-03
       16|2.053729e+00|3.773449e-04|7.749642e-04
       17|2.053470e+00|1.261952e-04|2.591382e-04
       18|2.053064e+00|1.975579e-04|4.055990e-04
       19|2.052433e+00|3.077095e-04|6.315532e-04
    It.  |Loss        |Relative loss|Absolute loss
    ------------------------------------------------
       20|2.052307e+00|6.107891e-05|1.253527e-04




.. GENERATED FROM PYTHON SOURCE LINES 60-62

Fig 1 : plots source and target samples
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-80

.. code-block:: default


    pl.figure(1, figsize=(10, 5))
    pl.subplot(1, 2, 1)
    pl.scatter(Xs[:, 0], Xs[:, 1], c=ys, marker='+', label='Source samples')
    pl.xticks([])
    pl.yticks([])
    pl.legend(loc=0)
    pl.title('Source  samples')

    pl.subplot(1, 2, 2)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o', label='Target samples')
    pl.xticks([])
    pl.yticks([])
    pl.legend(loc=0)
    pl.title('Target samples')
    pl.tight_layout()





.. image:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_classes_001.png
    :alt: Source  samples, Target samples
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-83

Fig 2 : plot optimal couplings and transported samples
------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 83-150

.. code-block:: default


    param_img = {'interpolation': 'nearest'}

    pl.figure(2, figsize=(15, 8))
    pl.subplot(2, 4, 1)
    pl.imshow(ot_emd.coupling_, **param_img)
    pl.xticks([])
    pl.yticks([])
    pl.title('Optimal coupling\nEMDTransport')

    pl.subplot(2, 4, 2)
    pl.imshow(ot_sinkhorn.coupling_, **param_img)
    pl.xticks([])
    pl.yticks([])
    pl.title('Optimal coupling\nSinkhornTransport')

    pl.subplot(2, 4, 3)
    pl.imshow(ot_lpl1.coupling_, **param_img)
    pl.xticks([])
    pl.yticks([])
    pl.title('Optimal coupling\nSinkhornLpl1Transport')

    pl.subplot(2, 4, 4)
    pl.imshow(ot_l1l2.coupling_, **param_img)
    pl.xticks([])
    pl.yticks([])
    pl.title('Optimal coupling\nSinkhornL1l2Transport')

    pl.subplot(2, 4, 5)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=0.3)
    pl.scatter(transp_Xs_emd[:, 0], transp_Xs_emd[:, 1], c=ys,
               marker='+', label='Transp samples', s=30)
    pl.xticks([])
    pl.yticks([])
    pl.title('Transported samples\nEmdTransport')
    pl.legend(loc="lower left")

    pl.subplot(2, 4, 6)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=0.3)
    pl.scatter(transp_Xs_sinkhorn[:, 0], transp_Xs_sinkhorn[:, 1], c=ys,
               marker='+', label='Transp samples', s=30)
    pl.xticks([])
    pl.yticks([])
    pl.title('Transported samples\nSinkhornTransport')

    pl.subplot(2, 4, 7)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=0.3)
    pl.scatter(transp_Xs_lpl1[:, 0], transp_Xs_lpl1[:, 1], c=ys,
               marker='+', label='Transp samples', s=30)
    pl.xticks([])
    pl.yticks([])
    pl.title('Transported samples\nSinkhornLpl1Transport')

    pl.subplot(2, 4, 8)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=0.3)
    pl.scatter(transp_Xs_l1l2[:, 0], transp_Xs_l1l2[:, 1], c=ys,
               marker='+', label='Transp samples', s=30)
    pl.xticks([])
    pl.yticks([])
    pl.title('Transported samples\nSinkhornL1l2Transport')
    pl.tight_layout()

    pl.show()



.. image:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_classes_002.png
    :alt: Optimal coupling EMDTransport, Optimal coupling SinkhornTransport, Optimal coupling SinkhornLpl1Transport, Optimal coupling SinkhornL1l2Transport, Transported samples EmdTransport, Transported samples SinkhornTransport, Transported samples SinkhornLpl1Transport, Transported samples SinkhornL1l2Transport
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.755 seconds)


.. _sphx_glr_download_auto_examples_domain-adaptation_plot_otda_classes.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_otda_classes.py <plot_otda_classes.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_otda_classes.ipynb <plot_otda_classes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
