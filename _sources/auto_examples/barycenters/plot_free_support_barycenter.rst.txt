
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/barycenters/plot_free_support_barycenter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_barycenters_plot_free_support_barycenter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_barycenters_plot_free_support_barycenter.py:


========================================================
2D free support Wasserstein barycenters of distributions
========================================================

Illustration of 2D Wasserstein barycenters if distributions are weighted
sum of diracs.

.. GENERATED FROM PYTHON SOURCE LINES 11-21

.. code-block:: default


    # Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>
    #
    # License: MIT License

    import numpy as np
    import matplotlib.pylab as pl
    import ot









.. GENERATED FROM PYTHON SOURCE LINES 22-24

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 24-47

.. code-block:: default


    N = 3
    d = 2
    measures_locations = []
    measures_weights = []

    for i in range(N):

        n_i = np.random.randint(low=1, high=20)  # nb samples

        mu_i = np.random.normal(0., 4., (d,))  # Gaussian mean

        A_i = np.random.rand(d, d)
        cov_i = np.dot(A_i, A_i.transpose())  # Gaussian covariance matrix

        x_i = ot.datasets.make_2D_samples_gauss(n_i, mu_i, cov_i)  # Dirac locations
        b_i = np.random.uniform(0., 1., (n_i,))
        b_i = b_i / np.sum(b_i)  # Dirac weights

        measures_locations.append(x_i)
        measures_weights.append(b_i)









.. GENERATED FROM PYTHON SOURCE LINES 48-50

Compute free support barycenter
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 50-58

.. code-block:: default


    k = 10  # number of Diracs of the barycenter
    X_init = np.random.normal(0., 1., (k, d))  # initial Dirac locations
    b = np.ones((k,)) / k  # weights of the barycenter (it will not be optimized, only the locations are optimized)

    X = ot.lp.free_support_barycenter(measures_locations, measures_weights, X_init, b)









.. GENERATED FROM PYTHON SOURCE LINES 59-61

Plot data
---------

.. GENERATED FROM PYTHON SOURCE LINES 61-70

.. code-block:: default


    pl.figure(1)
    for (x_i, b_i) in zip(measures_locations, measures_weights):
        color = np.random.randint(low=1, high=10 * N)
        pl.scatter(x_i[:, 0], x_i[:, 1], s=b_i * 1000, label='input measure')
    pl.scatter(X[:, 0], X[:, 1], s=b * 1000, c='black', marker='^', label='2-Wasserstein barycenter')
    pl.title('Data measures and their barycenter')
    pl.legend(loc=0)
    pl.show()



.. image:: /auto_examples/barycenters/images/sphx_glr_plot_free_support_barycenter_001.png
    :alt: Data measures and their barycenter
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.095 seconds)


.. _sphx_glr_download_auto_examples_barycenters_plot_free_support_barycenter.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_free_support_barycenter.py <plot_free_support_barycenter.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_free_support_barycenter.ipynb <plot_free_support_barycenter.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
