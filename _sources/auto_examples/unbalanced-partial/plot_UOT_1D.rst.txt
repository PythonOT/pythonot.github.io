.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_unbalanced-partial_plot_UOT_1D.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_unbalanced-partial_plot_UOT_1D.py:


===============================
1D Unbalanced optimal transport
===============================

This example illustrates the computation of Unbalanced Optimal transport
using a Kullback-Leibler relaxation.


.. code-block:: default


    # Author: Hicham Janati <hicham.janati@inria.fr>
    #
    # License: MIT License

    import numpy as np
    import matplotlib.pylab as pl
    import ot
    import ot.plot
    from ot.datasets import make_1D_gauss as gauss








Generate data
-------------


.. code-block:: default


    n = 100  # nb bins

    # bin positions
    x = np.arange(n, dtype=np.float64)

    # Gaussian distributions
    a = gauss(n, m=20, s=5)  # m= mean, s= std
    b = gauss(n, m=60, s=10)

    # make distributions unbalanced
    b *= 5.

    # loss matrix
    M = ot.dist(x.reshape((n, 1)), x.reshape((n, 1)))
    M /= M.max()









Plot distributions and loss matrix
----------------------------------


.. code-block:: default


    pl.figure(1, figsize=(6.4, 3))
    pl.plot(x, a, 'b', label='Source distribution')
    pl.plot(x, b, 'r', label='Target distribution')
    pl.legend()

    # plot distributions and loss matrix

    pl.figure(2, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, M, 'Cost matrix M')





.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_001.png
          :alt: plot UOT 1D
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_002.png
          :alt: Cost matrix M
          :class: sphx-glr-multi-img





Solve Unbalanced Sinkhorn
--------------


.. code-block:: default



    # Sinkhorn

    epsilon = 0.1  # entropy parameter
    alpha = 1.  # Unbalanced KL relaxation parameter
    Gs = ot.unbalanced.sinkhorn_unbalanced(a, b, M, epsilon, alpha, verbose=True)

    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, Gs, 'UOT matrix Sinkhorn')

    pl.show()



.. image:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_003.png
    :alt: UOT matrix Sinkhorn
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.296 seconds)


.. _sphx_glr_download_auto_examples_unbalanced-partial_plot_UOT_1D.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_UOT_1D.py <plot_UOT_1D.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_UOT_1D.ipynb <plot_UOT_1D.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
