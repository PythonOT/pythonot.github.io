
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_stochastic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_stochastic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_stochastic.py:


===================
Stochastic examples
===================

This example is designed to show how to use the stochatic optimization
algorithms for discrete and semi-continuous measures from the POT library.

[18] Genevay, A., Cuturi, M., Peyr√©, G. & Bach, F.
Stochastic Optimization for Large-scale Optimal Transport.
Advances in Neural Information Processing Systems (2016).

[19] Seguy, V., Bhushan Damodaran, B., Flamary, R., Courty, N., Rolet, A. &
Blondel, M. Large-scale Optimal Transport and Mapping Estimation.
International Conference on Learning Representation (2018)

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Author: Kilian Fatras <kilian.fatras@gmail.com>
    #
    # License: MIT License

    import matplotlib.pylab as pl
    import numpy as np
    import ot
    import ot.plot









.. GENERATED FROM PYTHON SOURCE LINES 30-38

Compute the Transportation Matrix for the Semi-Dual Problem
-----------------------------------------------------------

Discrete case
`````````````

Sample two discrete measures for the discrete case and compute their cost
matrix c.

.. GENERATED FROM PYTHON SOURCE LINES 38-52

.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 1000

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Call the "SAG" method to find the transportation matrix in the discrete case

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default


    method = "SAG"
    sag_pi = ot.stochastic.solve_semi_dual_entropic(a, b, M, reg, method,
                                                    numItermax)
    print(sag_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553509e-02 9.96395660e-02 1.76579142e-02 4.31178196e-06]
     [1.21640234e-01 1.25357448e-02 1.30225078e-03 7.37891338e-03]
     [3.56123975e-03 7.61451746e-02 6.31505947e-02 1.33831456e-07]
     [2.61515202e-02 3.34246014e-02 8.28734709e-02 4.07550428e-04]
     [9.85500870e-03 7.52288517e-04 1.08262628e-02 1.21423583e-01]
     [2.16904253e-02 9.03825797e-04 1.87178503e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177216e-02 2.39440107e-03]]




.. GENERATED FROM PYTHON SOURCE LINES 61-67

Semi-Continuous Case
````````````````````

Sample one general measure a, one discrete measures b for the semicontinous
case, the points where source and target measures are defined and compute the
cost matrix.

.. GENERATED FROM PYTHON SOURCE LINES 67-82

.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 1000
    log = True

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








.. GENERATED FROM PYTHON SOURCE LINES 83-85

Call the "ASGD" method to find the transportation matrix in the semicontinous
case.

.. GENERATED FROM PYTHON SOURCE LINES 85-92

.. code-block:: default


    method = "ASGD"
    asgd_pi, log_asgd = ot.stochastic.solve_semi_dual_entropic(a, b, M, reg, method,
                                                               numItermax, log=log)
    print(log_asgd['alpha'], log_asgd['beta'])
    print(asgd_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3.8408683  7.65574198 3.86116323 2.62267378 1.53244093 3.36689841
     2.75087876] [-2.51751688 -2.35271534 -0.87357408  5.7438063 ]
    [[2.33730329e-02 1.01942746e-01 1.75374412e-02 3.92311094e-06]
     [1.20325557e-01 1.38714561e-02 1.39884265e-03 7.26128734e-03]
     [3.23391884e-03 7.73502227e-02 6.22728804e-02 1.20900107e-07]
     [2.42687165e-02 3.46982349e-02 8.35139456e-02 3.76245920e-04]
     [9.82822827e-03 8.39254992e-04 1.17243937e-02 1.20465266e-01]
     [2.17431322e-02 1.01351469e-03 2.03752813e-03 1.18062968e-01]
     [3.89924985e-02 2.79256209e-02 7.37034599e-02 2.23556350e-03]]




.. GENERATED FROM PYTHON SOURCE LINES 93-94

Compare the results with the Sinkhorn algorithm

.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: default


    sinkhorn_pi = ot.sinkhorn(a, b, M, reg)
    print(sinkhorn_pi)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553508e-02 9.96395661e-02 1.76579142e-02 4.31178193e-06]
     [1.21640234e-01 1.25357448e-02 1.30225079e-03 7.37891333e-03]
     [3.56123974e-03 7.61451746e-02 6.31505947e-02 1.33831455e-07]
     [2.61515201e-02 3.34246014e-02 8.28734709e-02 4.07550425e-04]
     [9.85500876e-03 7.52288523e-04 1.08262629e-02 1.21423583e-01]
     [2.16904255e-02 9.03825804e-04 1.87178504e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177217e-02 2.39440105e-03]]




.. GENERATED FROM PYTHON SOURCE LINES 100-104

Plot Transportation Matrices
````````````````````````````

For SAG

.. GENERATED FROM PYTHON SOURCE LINES 104-110

.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sag_pi, 'semi-dual : OT matrix SAG')
    pl.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_stochastic_001.png
   :alt: semi-dual : OT matrix SAG
   :srcset: /auto_examples/images/sphx_glr_plot_stochastic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 111-112

For ASGD

.. GENERATED FROM PYTHON SOURCE LINES 112-118

.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, asgd_pi, 'semi-dual : OT matrix ASGD')
    pl.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_stochastic_002.png
   :alt: semi-dual : OT matrix ASGD
   :srcset: /auto_examples/images/sphx_glr_plot_stochastic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 119-120

For Sinkhorn

.. GENERATED FROM PYTHON SOURCE LINES 120-126

.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sinkhorn_pi, 'OT matrix Sinkhorn')
    pl.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_stochastic_003.png
   :alt: OT matrix Sinkhorn
   :srcset: /auto_examples/images/sphx_glr_plot_stochastic_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 127-135

Compute the Transportation Matrix for the Dual Problem
------------------------------------------------------

Semi-continuous case
````````````````````

Sample one general measure a, one discrete measures b for the semi-continuous
case and compute the cost matrix c.

.. GENERATED FROM PYTHON SOURCE LINES 135-152

.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 100000
    lr = 0.1
    batch_size = 3
    log = True

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








.. GENERATED FROM PYTHON SOURCE LINES 153-155

Call the "SGD" dual method to find the transportation matrix in the
semi-continuous case

.. GENERATED FROM PYTHON SOURCE LINES 156-163

.. code-block:: default


    sgd_dual_pi, log_sgd = ot.stochastic.solve_dual_entropic(a, b, M, reg,
                                                             batch_size, numItermax,
                                                             lr, log=log)
    print(log_sgd['alpha'], log_sgd['beta'])
    print(sgd_dual_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.913831   2.76576952 1.06386024 0.01845694 0.61255922 1.82537639
     0.11279279] [0.33935058 0.47632517 1.57393347 4.92303689]
    [[2.17891706e-02 9.24265757e-02 1.08569817e-02 9.24653073e-08]
     [1.57540275e-02 1.76632525e-03 1.21624154e-04 2.40364285e-05]
     [3.43239799e-03 7.98444985e-02 4.38919345e-02 3.24427608e-09]
     [3.12443564e-02 4.34457266e-02 7.14004623e-02 1.22467026e-05]
     [6.81863524e-02 5.66279792e-03 5.40169257e-02 2.11303487e-02]
     [8.10157346e-02 3.67275724e-03 5.04159698e-03 1.11220171e-02]
     [4.85284767e-02 3.38012951e-02 6.09145046e-02 7.03436990e-05]]




.. GENERATED FROM PYTHON SOURCE LINES 164-168

Compare the results with the Sinkhorn algorithm
```````````````````````````````````````````````

Call the Sinkhorn algorithm from POT

.. GENERATED FROM PYTHON SOURCE LINES 169-173

.. code-block:: default


    sinkhorn_pi = ot.sinkhorn(a, b, M, reg)
    print(sinkhorn_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553508e-02 9.96395661e-02 1.76579142e-02 4.31178193e-06]
     [1.21640234e-01 1.25357448e-02 1.30225079e-03 7.37891333e-03]
     [3.56123974e-03 7.61451746e-02 6.31505947e-02 1.33831455e-07]
     [2.61515201e-02 3.34246014e-02 8.28734709e-02 4.07550425e-04]
     [9.85500876e-03 7.52288523e-04 1.08262629e-02 1.21423583e-01]
     [2.16904255e-02 9.03825804e-04 1.87178504e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177217e-02 2.39440105e-03]]




.. GENERATED FROM PYTHON SOURCE LINES 174-178

Plot Transportation Matrices
````````````````````````````

For SGD

.. GENERATED FROM PYTHON SOURCE LINES 178-184

.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sgd_dual_pi, 'dual : OT matrix SGD')
    pl.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_stochastic_004.png
   :alt: dual : OT matrix SGD
   :srcset: /auto_examples/images/sphx_glr_plot_stochastic_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 185-186

For Sinkhorn

.. GENERATED FROM PYTHON SOURCE LINES 186-190

.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sinkhorn_pi, 'OT matrix Sinkhorn')
    pl.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_stochastic_005.png
   :alt: OT matrix Sinkhorn
   :srcset: /auto_examples/images/sphx_glr_plot_stochastic_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.508 seconds)


.. _sphx_glr_download_auto_examples_plot_stochastic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stochastic.py <plot_stochastic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stochastic.ipynb <plot_stochastic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
