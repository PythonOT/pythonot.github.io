
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/unbalanced-partial/plot_UOT_1D.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_unbalanced-partial_plot_UOT_1D.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_unbalanced-partial_plot_UOT_1D.py:


===============================
1D Unbalanced optimal transport
===============================

This example illustrates the computation of Unbalanced Optimal transport
using a Kullback-Leibler relaxation.

.. GENERATED FROM PYTHON SOURCE LINES 10-23

.. code-block:: Python


    # Author: Hicham Janati <hicham.janati@inria.fr>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 4

    import numpy as np
    import matplotlib.pylab as pl
    import ot
    import ot.plot
    from ot.datasets import make_1D_gauss as gauss








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 29-47

.. code-block:: Python


    n = 100  # nb bins

    # bin positions
    x = np.arange(n, dtype=np.float64)

    # Gaussian distributions
    a = gauss(n, m=20, s=5)  # m= mean, s= std
    b = gauss(n, m=60, s=10)

    # make distributions unbalanced
    b *= 5.0

    # loss matrix
    M = ot.dist(x.reshape((n, 1)), x.reshape((n, 1)))
    M /= M.max()









.. GENERATED FROM PYTHON SOURCE LINES 48-50

Plot distributions and loss matrix
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 52-64

.. code-block:: Python


    pl.figure(1, figsize=(6.4, 3))
    pl.plot(x, a, "b", label="Source distribution")
    pl.plot(x, b, "r", label="Target distribution")
    pl.legend()

    # plot distributions and loss matrix

    pl.figure(2, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, M, "Cost matrix M")





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_001.png
         :alt: plot UOT 1D
         :srcset: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_002.png
         :alt: plot UOT 1D
         :srcset: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: >, <Axes: >, <Axes: >)



.. GENERATED FROM PYTHON SOURCE LINES 65-67

Solve Unbalanced Sinkhorn
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-80

.. code-block:: Python


    # Sinkhorn

    epsilon = 0.1  # entropy parameter
    alpha = 1.0  # Unbalanced KL relaxation parameter
    Gs = ot.unbalanced.sinkhorn_unbalanced(a, b, M, epsilon, alpha, verbose=True)

    pl.figure(3, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, Gs, "UOT matrix Sinkhorn")

    pl.show()





.. image-sg:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_003.png
   :alt: plot UOT 1D
   :srcset: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-83

plot the transported mass
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 83-91

.. code-block:: Python


    pl.figure(4, figsize=(6.4, 3))
    pl.plot(x, a, "b", label="Source distribution")
    pl.plot(x, b, "r", label="Target distribution")
    pl.fill(x, Gs.sum(1), "b", alpha=0.5, label="Transported source")
    pl.fill(x, Gs.sum(0), "r", alpha=0.5, label="Transported target")
    pl.legend(loc="upper right")
    pl.title("Distributions and transported mass for UOT")



.. image-sg:: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_004.png
   :alt: Distributions and transported mass for UOT
   :srcset: /auto_examples/unbalanced-partial/images/sphx_glr_plot_UOT_1D_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Distributions and transported mass for UOT')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.344 seconds)


.. _sphx_glr_download_auto_examples_unbalanced-partial_plot_UOT_1D.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_UOT_1D.ipynb <plot_UOT_1D.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_UOT_1D.py <plot_UOT_1D.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_UOT_1D.zip <plot_UOT_1D.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
