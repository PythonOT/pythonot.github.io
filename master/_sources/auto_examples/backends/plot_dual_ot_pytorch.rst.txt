
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/backends/plot_dual_ot_pytorch.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_backends_plot_dual_ot_pytorch.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_backends_plot_dual_ot_pytorch.py:


======================================================================
Dual OT solvers for entropic and quadratic regularized OT with Pytorch
======================================================================

.. GENERATED FROM PYTHON SOURCE LINES 9-22

.. code-block:: default


    # Author: Remi Flamary <remi.flamary@polytechnique.edu>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 3

    import numpy as np
    import matplotlib.pyplot as pl
    import torch
    import ot
    import ot.plot








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Data generation
---------------

.. GENERATED FROM PYTHON SOURCE LINES 25-43

.. code-block:: default


    torch.manual_seed(1)

    n_source_samples = 100
    n_target_samples = 100
    theta = 2 * np.pi / 20
    noise_level = 0.1

    Xs, ys = ot.datasets.make_data_classif(
        'gaussrot', n_source_samples, nz=noise_level)
    Xt, yt = ot.datasets.make_data_classif(
        'gaussrot', n_target_samples, theta=theta, nz=noise_level)

    # one of the target mode changes its variance (no linear mapping)
    Xt[yt == 2] *= 3
    Xt = Xt + 4









.. GENERATED FROM PYTHON SOURCE LINES 44-46

Plot data
---------

.. GENERATED FROM PYTHON SOURCE LINES 46-54

.. code-block:: default


    pl.figure(1, (10, 5))
    pl.clf()
    pl.scatter(Xs[:, 0], Xs[:, 1], marker='+', label='Source samples')
    pl.scatter(Xt[:, 0], Xt[:, 1], marker='o', label='Target samples')
    pl.legend(loc=0)
    pl.title('Source and target distributions')




.. image-sg:: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_001.png
   :alt: Source and target distributions
   :srcset: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Source and target distributions')



.. GENERATED FROM PYTHON SOURCE LINES 55-57

Convert data to torch tensors
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default


    xs = torch.tensor(Xs)
    xt = torch.tensor(Xt)








.. GENERATED FROM PYTHON SOURCE LINES 62-64

Estimating dual variables for entropic OT
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 64-102

.. code-block:: default


    u = torch.randn(n_source_samples, requires_grad=True)
    v = torch.randn(n_source_samples, requires_grad=True)

    reg = 0.5

    optimizer = torch.optim.Adam([u, v], lr=1)

    # number of iteration
    n_iter = 200


    losses = []

    for i in range(n_iter):

        # generate noise samples

        # minus because we maximize te dual loss
        loss = -ot.stochastic.loss_dual_entropic(u, v, xs, xt, reg=reg)
        losses.append(float(loss.detach()))

        if i % 10 == 0:
            print("Iter: {:3d}, loss={}".format(i, losses[-1]))

        loss.backward()
        optimizer.step()
        optimizer.zero_grad()


    pl.figure(2)
    pl.plot(losses)
    pl.grid()
    pl.title('Dual objective (negative)')
    pl.xlabel("Iterations")

    Ge = ot.stochastic.plan_dual_entropic(u, v, xs, xt, reg=reg)




.. image-sg:: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_002.png
   :alt: Dual objective (negative)
   :srcset: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Iter:   0, loss=0.2020494900224743
    Iter:  10, loss=-19.396357473800915
    Iter:  20, loss=-31.734722625277985
    Iter:  30, loss=-36.636655516910736
    Iter:  40, loss=-39.79769576436481
    Iter:  50, loss=-41.664695396747426
    Iter:  60, loss=-42.71222915251982
    Iter:  70, loss=-43.291626803031704
    Iter:  80, loss=-43.37448067410682
    Iter:  90, loss=-43.44848095525706
    Iter: 100, loss=-43.47161771368269
    Iter: 110, loss=-43.479055866619944
    Iter: 120, loss=-43.484569355588626
    Iter: 130, loss=-43.48737319611758
    Iter: 140, loss=-43.48915965253611
    Iter: 150, loss=-43.490489187769114
    Iter: 160, loss=-43.49147079365159
    Iter: 170, loss=-43.49223300112426
    Iter: 180, loss=-43.49282028377324
    Iter: 190, loss=-43.49327886441109




.. GENERATED FROM PYTHON SOURCE LINES 103-105

Plot teh estimated entropic OT plan
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 105-115

.. code-block:: default


    pl.figure(3, (10, 5))
    pl.clf()
    ot.plot.plot2D_samples_mat(Xs, Xt, Ge.detach().numpy(), alpha=0.1)
    pl.scatter(Xs[:, 0], Xs[:, 1], marker='+', label='Source samples', zorder=2)
    pl.scatter(Xt[:, 0], Xt[:, 1], marker='o', label='Target samples', zorder=2)
    pl.legend(loc=0)
    pl.title('Source and target distributions')





.. image-sg:: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_003.png
   :alt: Source and target distributions
   :srcset: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Source and target distributions')



.. GENERATED FROM PYTHON SOURCE LINES 116-118

Estimating dual variables for quadratic OT
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 118-158

.. code-block:: default


    u = torch.randn(n_source_samples, requires_grad=True)
    v = torch.randn(n_source_samples, requires_grad=True)

    reg = 0.01

    optimizer = torch.optim.Adam([u, v], lr=1)

    # number of iteration
    n_iter = 200


    losses = []


    for i in range(n_iter):

        # generate noise samples

        # minus because we maximize te dual loss
        loss = -ot.stochastic.loss_dual_quadratic(u, v, xs, xt, reg=reg)
        losses.append(float(loss.detach()))

        if i % 10 == 0:
            print("Iter: {:3d}, loss={}".format(i, losses[-1]))

        loss.backward()
        optimizer.step()
        optimizer.zero_grad()


    pl.figure(4)
    pl.plot(losses)
    pl.grid()
    pl.title('Dual objective (negative)')
    pl.xlabel("Iterations")

    Gq = ot.stochastic.plan_dual_quadratic(u, v, xs, xt, reg=reg)





.. image-sg:: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_004.png
   :alt: Dual objective (negative)
   :srcset: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Iter:   0, loss=-0.0018442196020623663
    Iter:  10, loss=-19.49959480223837
    Iter:  20, loss=-31.589987443285374
    Iter:  30, loss=-36.370375259328156
    Iter:  40, loss=-39.47442781296201
    Iter:  50, loss=-41.3828410413064
    Iter:  60, loss=-42.52284354488437
    Iter:  70, loss=-43.10221983594981
    Iter:  80, loss=-43.228207728012144
    Iter:  90, loss=-43.29801248655413
    Iter: 100, loss=-43.32955381433912
    Iter: 110, loss=-43.34275848030997
    Iter: 120, loss=-43.34846893298797
    Iter: 130, loss=-43.35152699063593
    Iter: 140, loss=-43.353844932476555
    Iter: 150, loss=-43.35588567249576
    Iter: 160, loss=-43.35758262833273
    Iter: 170, loss=-43.358847456646515
    Iter: 180, loss=-43.359749761517236
    Iter: 190, loss=-43.36036546879263




.. GENERATED FROM PYTHON SOURCE LINES 159-161

Plot the estimated quadratic OT plan
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-169

.. code-block:: default


    pl.figure(5, (10, 5))
    pl.clf()
    ot.plot.plot2D_samples_mat(Xs, Xt, Gq.detach().numpy(), alpha=0.1)
    pl.scatter(Xs[:, 0], Xs[:, 1], marker='+', label='Source samples', zorder=2)
    pl.scatter(Xt[:, 0], Xt[:, 1], marker='o', label='Target samples', zorder=2)
    pl.legend(loc=0)
    pl.title('OT plan with quadratic regularization')



.. image-sg:: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_005.png
   :alt: OT plan with quadratic regularization
   :srcset: /auto_examples/backends/images/sphx_glr_plot_dual_ot_pytorch_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'OT plan with quadratic regularization')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.588 seconds)


.. _sphx_glr_download_auto_examples_backends_plot_dual_ot_pytorch.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_dual_ot_pytorch.py <plot_dual_ot_pytorch.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_dual_ot_pytorch.ipynb <plot_dual_ot_pytorch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
