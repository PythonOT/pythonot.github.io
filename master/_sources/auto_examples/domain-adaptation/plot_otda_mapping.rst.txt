
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/domain-adaptation/plot_otda_mapping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_domain-adaptation_plot_otda_mapping.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_domain-adaptation_plot_otda_mapping.py:


===========================================
OT mapping estimation for domain adaptation
===========================================

This example presents how to use MappingTransport to estimate at the same
time both the coupling transport and approximate the transport map with either
a linear or a kernelized mapping as introduced in [8].

[8] M. Perrot, N. Courty, R. Flamary, A. Habrard,
"Mapping estimation for discrete optimal transport",
Neural Information Processing Systems (NIPS), 2016.

.. GENERATED FROM PYTHON SOURCE LINES 15-28

.. code-block:: default


    # Authors: Remi Flamary <remi.flamary@unice.fr>
    #          Stanislas Chambon <stan.chambon@gmail.com>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 2

    import numpy as np
    import matplotlib.pylab as pl
    import ot









.. GENERATED FROM PYTHON SOURCE LINES 29-31

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 31-48

.. code-block:: default


    n_source_samples = 100
    n_target_samples = 100
    theta = 2 * np.pi / 20
    noise_level = 0.1

    Xs, ys = ot.datasets.make_data_classif(
        'gaussrot', n_source_samples, nz=noise_level)
    Xs_new, _ = ot.datasets.make_data_classif(
        'gaussrot', n_source_samples, nz=noise_level)
    Xt, yt = ot.datasets.make_data_classif(
        'gaussrot', n_target_samples, theta=theta, nz=noise_level)

    # one of the target mode changes its variance (no linear mapping)
    Xt[yt == 2] *= 3
    Xt = Xt + 4








.. GENERATED FROM PYTHON SOURCE LINES 49-51

Plot data
---------

.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: default


    pl.figure(1, (10, 5))
    pl.clf()
    pl.scatter(Xs[:, 0], Xs[:, 1], c=ys, marker='+', label='Source samples')
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o', label='Target samples')
    pl.legend(loc=0)
    pl.title('Source and target distributions')





.. image-sg:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_mapping_001.png
   :alt: Source and target distributions
   :srcset: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_mapping_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Source and target distributions')



.. GENERATED FROM PYTHON SOURCE LINES 61-63

Instantiate the different transport algorithms and fit them
-----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-91

.. code-block:: default


    # MappingTransport with linear kernel
    ot_mapping_linear = ot.da.MappingTransport(
        kernel="linear", mu=1e0, eta=1e-8, bias=True,
        max_iter=20, verbose=True)

    ot_mapping_linear.fit(Xs=Xs, Xt=Xt)

    # for original source samples, transform applies barycentric mapping
    transp_Xs_linear = ot_mapping_linear.transform(Xs=Xs)

    # for out of source samples, transform applies the linear mapping
    transp_Xs_linear_new = ot_mapping_linear.transform(Xs=Xs_new)


    # MappingTransport with gaussian kernel
    ot_mapping_gaussian = ot.da.MappingTransport(
        kernel="gaussian", eta=1e-5, mu=1e-1, bias=True, sigma=1,
        max_iter=10, verbose=True)
    ot_mapping_gaussian.fit(Xs=Xs, Xt=Xt)

    # for original source samples, transform applies barycentric mapping
    transp_Xs_gaussian = ot_mapping_gaussian.transform(Xs=Xs)

    # for out of source samples, transform applies the gaussian mapping
    transp_Xs_gaussian_new = ot_mapping_gaussian.transform(Xs=Xs_new)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    It.  |Loss        |Delta loss
    --------------------------------
        0|4.217771e+03|0.000000e+00
        1|4.210931e+03|-1.621878e-03
        2|4.210609e+03|-7.643077e-05
        3|4.210483e+03|-2.977621e-05
        4|4.210414e+03|-1.654506e-05
        5|4.210410e+03|-9.488570e-07
    It.  |Loss        |Delta loss
    --------------------------------
        0|4.231099e+02|0.000000e+00
        1|4.202587e+02|-6.738836e-03
        2|4.200195e+02|-5.691641e-04
        3|4.199041e+02|-2.747363e-04
        4|4.198255e+02|-1.872125e-04
        5|4.197716e+02|-1.283324e-04
        6|4.197311e+02|-9.637406e-05
        7|4.196998e+02|-7.461342e-05
        8|4.196768e+02|-5.475383e-05
        9|4.196583e+02|-4.405675e-05
       10|4.196434e+02|-3.566859e-05




.. GENERATED FROM PYTHON SOURCE LINES 92-94

Plot transported samples
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 94-128

.. code-block:: default


    pl.figure(2)
    pl.clf()
    pl.subplot(2, 2, 1)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=.2)
    pl.scatter(transp_Xs_linear[:, 0], transp_Xs_linear[:, 1], c=ys, marker='+',
               label='Mapped source samples')
    pl.title("Bary. mapping (linear)")
    pl.legend(loc=0)

    pl.subplot(2, 2, 2)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=.2)
    pl.scatter(transp_Xs_linear_new[:, 0], transp_Xs_linear_new[:, 1],
               c=ys, marker='+', label='Learned mapping')
    pl.title("Estim. mapping (linear)")

    pl.subplot(2, 2, 3)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=.2)
    pl.scatter(transp_Xs_gaussian[:, 0], transp_Xs_gaussian[:, 1], c=ys,
               marker='+', label='barycentric mapping')
    pl.title("Bary. mapping (kernel)")

    pl.subplot(2, 2, 4)
    pl.scatter(Xt[:, 0], Xt[:, 1], c=yt, marker='o',
               label='Target samples', alpha=.2)
    pl.scatter(transp_Xs_gaussian_new[:, 0], transp_Xs_gaussian_new[:, 1], c=ys,
               marker='+', label='Learned mapping')
    pl.title("Estim. mapping (kernel)")
    pl.tight_layout()

    pl.show()



.. image-sg:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_mapping_002.png
   :alt: Bary. mapping (linear), Estim. mapping (linear), Bary. mapping (kernel), Estim. mapping (kernel)
   :srcset: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_mapping_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.975 seconds)


.. _sphx_glr_download_auto_examples_domain-adaptation_plot_otda_mapping.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_otda_mapping.py <plot_otda_mapping.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_otda_mapping.ipynb <plot_otda_mapping.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
