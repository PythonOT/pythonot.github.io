
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/domain-adaptation/plot_otda_linear_mapping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_domain-adaptation_plot_otda_linear_mapping.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_domain-adaptation_plot_otda_linear_mapping.py:


============================
Linear OT mapping estimation
============================

.. GENERATED FROM PYTHON SOURCE LINES 10-23

.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 2
    import os
    from pathlib import Path

    import numpy as np
    from matplotlib import pyplot as plt
    import ot








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 26-51

.. code-block:: default


    n = 1000
    d = 2
    sigma = .1

    rng = np.random.RandomState(42)

    # source samples
    angles = rng.rand(n, 1) * 2 * np.pi
    xs = np.concatenate((np.sin(angles), np.cos(angles)),
                        axis=1) + sigma * rng.randn(n, 2)
    xs[:n // 2, 1] += 2


    # target samples
    anglet = rng.rand(n, 1) * 2 * np.pi
    xt = np.concatenate((np.sin(anglet), np.cos(anglet)),
                        axis=1) + sigma * rng.randn(n, 2)
    xt[:n // 2, 1] += 2


    A = np.array([[1.5, .7], [.7, 1.5]])
    b = np.array([[4, 2]])
    xt = xt.dot(A) + b








.. GENERATED FROM PYTHON SOURCE LINES 52-54

Plot data
---------

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default


    plt.figure(1, (5, 5))
    plt.plot(xs[:, 0], xs[:, 1], '+')
    plt.plot(xt[:, 0], xt[:, 1], 'o')





.. image-sg:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_linear_mapping_001.png
   :alt: plot otda linear mapping
   :srcset: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_linear_mapping_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x7f642ae19100>]



.. GENERATED FROM PYTHON SOURCE LINES 61-63

Estimate linear mapping and transport
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-69

.. code-block:: default


    Ae, be = ot.da.OT_mapping_linear(xs, xt)

    xst = xs.dot(Ae) + be









.. GENERATED FROM PYTHON SOURCE LINES 70-72

Plot transported samples
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 72-81

.. code-block:: default


    plt.figure(1, (5, 5))
    plt.clf()
    plt.plot(xs[:, 0], xs[:, 1], '+')
    plt.plot(xt[:, 0], xt[:, 1], 'o')
    plt.plot(xst[:, 0], xst[:, 1], '+')

    plt.show()




.. image-sg:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_linear_mapping_002.png
   :alt: plot otda linear mapping
   :srcset: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_linear_mapping_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-84

Load image data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 84-111

.. code-block:: default



    def im2mat(img):
        """Converts and image to matrix (one pixel per line)"""
        return img.reshape((img.shape[0] * img.shape[1], img.shape[2]))


    def mat2im(X, shape):
        """Converts back a matrix to an image"""
        return X.reshape(shape)


    def minmax(img):
        return np.clip(img, 0, 1)


    # Loading images
    this_file = os.path.realpath('__file__')
    data_path = os.path.join(Path(this_file).parent.parent.parent, 'data')

    I1 = plt.imread(os.path.join(data_path, 'ocean_day.jpg')).astype(np.float64) / 256
    I2 = plt.imread(os.path.join(data_path, 'ocean_sunset.jpg')).astype(np.float64) / 256


    X1 = im2mat(I1)
    X2 = im2mat(I2)








.. GENERATED FROM PYTHON SOURCE LINES 112-114

Estimate mapping and adapt
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 114-126

.. code-block:: default


    mapping = ot.da.LinearTransport()

    mapping.fit(Xs=X1, Xt=X2)


    xst = mapping.transform(Xs=X1)
    xts = mapping.inverse_transform(Xt=X2)

    I1t = minmax(mat2im(xst, I1.shape))
    I2t = minmax(mat2im(xts, I2.shape))








.. GENERATED FROM PYTHON SOURCE LINES 130-132

Plot transformed images
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 132-154

.. code-block:: default


    plt.figure(2, figsize=(10, 7))

    plt.subplot(2, 2, 1)
    plt.imshow(I1)
    plt.axis('off')
    plt.title('Im. 1')

    plt.subplot(2, 2, 2)
    plt.imshow(I2)
    plt.axis('off')
    plt.title('Im. 2')

    plt.subplot(2, 2, 3)
    plt.imshow(I1t)
    plt.axis('off')
    plt.title('Mapping Im. 1')

    plt.subplot(2, 2, 4)
    plt.imshow(I2t)
    plt.axis('off')
    plt.title('Inverse mapping Im. 2')



.. image-sg:: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_linear_mapping_003.png
   :alt: Im. 1, Im. 2, Mapping Im. 1, Inverse mapping Im. 2
   :srcset: /auto_examples/domain-adaptation/images/sphx_glr_plot_otda_linear_mapping_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inverse mapping Im. 2')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.293 seconds)


.. _sphx_glr_download_auto_examples_domain-adaptation_plot_otda_linear_mapping.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_otda_linear_mapping.py <plot_otda_linear_mapping.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_otda_linear_mapping.ipynb <plot_otda_linear_mapping.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
