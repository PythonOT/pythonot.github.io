
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_compute_emd.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_compute_emd.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_compute_emd.py:


==================
OT distances in 1D
==================

Shows how to compute multiple Wassersein and Sinkhorn with two different
ground metrics and plot their values for different distributions.

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 2

    import numpy as np
    import matplotlib.pylab as pl
    import ot
    from ot.datasets import make_1D_gauss as gauss









.. GENERATED FROM PYTHON SOURCE LINES 26-28

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 30-54

.. code-block:: default


    n = 100  # nb bins
    n_target = 20  # nb target distributions


    # bin positions
    x = np.arange(n, dtype=np.float64)

    lst_m = np.linspace(20, 90, n_target)

    # Gaussian distributions
    a = gauss(n, m=20, s=5)  # m= mean, s= std

    B = np.zeros((n, n_target))

    for i, m in enumerate(lst_m):
        B[:, i] = gauss(n, m=m, s=5)

    # loss matrix and normalization
    M = ot.dist(x.reshape((n, 1)), x.reshape((n, 1)), 'euclidean')
    M /= M.max() * 0.1
    M2 = ot.dist(x.reshape((n, 1)), x.reshape((n, 1)), 'sqeuclidean')
    M2 /= M2.max() * 0.1








.. GENERATED FROM PYTHON SOURCE LINES 55-57

Plot data
---------

.. GENERATED FROM PYTHON SOURCE LINES 59-72

.. code-block:: default


    pl.figure(1)
    pl.subplot(2, 1, 1)
    pl.plot(x, a, 'r', label='Source distribution')
    pl.title('Source distribution')
    pl.subplot(2, 1, 2)
    for i in range(n_target):
        pl.plot(x, B[:, i], 'b', alpha=i / n_target)
    pl.plot(x, B[:, -1], 'b', label='Target distributions')
    pl.title('Target distributions')
    pl.tight_layout()





.. image-sg:: /auto_examples/images/sphx_glr_plot_compute_emd_001.png
   :alt: Source distribution, Target distributions
   :srcset: /auto_examples/images/sphx_glr_plot_compute_emd_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-75

Compute EMD for the different losses
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 77-101

.. code-block:: default


    d_emd = ot.emd2(a, B, M)  # direct computation of OT loss
    d_emd2 = ot.emd2(a, B, M2)  # direct computation of OT loss with metrixc M2
    d_tv = [np.sum(abs(a - B[:, i])) for i in range(n_target)]

    pl.figure(2)
    pl.subplot(2, 1, 1)
    pl.plot(x, a, 'r', label='Source distribution')
    pl.title('Distributions')
    for i in range(n_target):
        pl.plot(x, B[:, i], 'b', alpha=i / n_target)
    pl.plot(x, B[:, -1], 'b', label='Target distributions')
    pl.ylim((-.01, 0.13))
    pl.xticks(())
    pl.legend()
    pl.subplot(2, 1, 2)
    pl.plot(d_emd, label='Euclidean OT')
    pl.plot(d_emd2, label='Squared Euclidean OT')
    pl.plot(d_tv, label='Total Variation (TV)')
    #pl.xlim((-7,23))
    pl.xlabel('Displacement')
    pl.title('Divergences')
    pl.legend()




.. image-sg:: /auto_examples/images/sphx_glr_plot_compute_emd_002.png
   :alt: Distributions, Divergences
   :srcset: /auto_examples/images/sphx_glr_plot_compute_emd_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fca02914a90>



.. GENERATED FROM PYTHON SOURCE LINES 102-104

Compute Sinkhorn for the different losses
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 106-133

.. code-block:: default

    reg = 1e-1
    d_sinkhorn = ot.sinkhorn2(a, B, M, reg)
    d_sinkhorn2 = ot.sinkhorn2(a, B, M2, reg)

    pl.figure(3)
    pl.clf()

    pl.subplot(2, 1, 1)
    pl.plot(x, a, 'r', label='Source distribution')
    pl.title('Distributions')
    for i in range(n_target):
        pl.plot(x, B[:, i], 'b', alpha=i / n_target)
    pl.plot(x, B[:, -1], 'b', label='Target distributions')
    pl.ylim((-.01, 0.13))
    pl.xticks(())
    pl.legend()
    pl.subplot(2, 1, 2)
    pl.plot(d_emd, label='Euclidean OT')
    pl.plot(d_emd2, label='Squared Euclidean OT')
    pl.plot(d_sinkhorn, '+', label='Euclidean Sinkhorn')
    pl.plot(d_sinkhorn2, '+', label='Squared Euclidean Sinkhorn')
    pl.plot(d_tv, label='Total Variation (TV)')
    #pl.xlim((-7,23))
    pl.xlabel('Displacement')
    pl.title('Divergences')
    pl.legend()
    pl.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_compute_emd_003.png
   :alt: Distributions, Divergences
   :srcset: /auto_examples/images/sphx_glr_plot_compute_emd_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.565 seconds)


.. _sphx_glr_download_auto_examples_plot_compute_emd.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_compute_emd.py <plot_compute_emd.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_compute_emd.ipynb <plot_compute_emd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
