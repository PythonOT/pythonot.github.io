
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/barycenters/plot_barycenter_lp_vs_entropic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_barycenters_plot_barycenter_lp_vs_entropic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_barycenters_plot_barycenter_lp_vs_entropic.py:


=================================================================================
1D Wasserstein barycenter: exact LP vs entropic regularization
=================================================================================

This example illustrates the computation of regularized Wasserstein Barycenter
as proposed in [3] and exact LP barycenters using standard LP solver.

It reproduces approximately Figure 3.1 and 3.2 from the following paper:
Cuturi, M., & Peyré, G. (2016). A smoothed dual approach for variational
Wasserstein problems. SIAM Journal on Imaging Sciences, 9(1), 320-343.

[3] Benamou, J. D., Carlier, G., Cuturi, M., Nenna, L., & Peyré, G. (2015).
Iterative Bregman projections for regularized transportation problems
SIAM Journal on Scientific Computing, 37(2), A1111-A1138.

.. GENERATED FROM PYTHON SOURCE LINES 19-35

.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 4

    import numpy as np
    import matplotlib.pylab as pl
    import ot
    # necessary for 3d plot even if not used
    from mpl_toolkits.mplot3d import Axes3D  # noqa
    from matplotlib.collections import PolyCollection  # noqa

    #import ot.lp.cvx as cvx








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Gaussian Data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 40-62

.. code-block:: default


    problems = []

    n = 100  # nb bins

    # bin positions
    x = np.arange(n, dtype=np.float64)

    # Gaussian distributions
    # Gaussian distributions
    a1 = ot.datasets.make_1D_gauss(n, m=20, s=5)  # m= mean, s= std
    a2 = ot.datasets.make_1D_gauss(n, m=60, s=8)

    # creating matrix A containing all distributions
    A = np.vstack((a1, a2)).T
    n_distributions = A.shape[1]

    # loss matrix + normalization
    M = ot.utils.dist0(n)
    M /= M.max()









.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default


    pl.figure(1, figsize=(6.4, 3))
    for i in range(n_distributions):
        pl.plot(x, A[:, i])
    pl.title('Distributions')
    pl.tight_layout()




.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_001.png
   :alt: Distributions
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-106

.. code-block:: default


    alpha = 0.5  # 0<=alpha<=1
    weights = np.array([1 - alpha, alpha])

    # l2bary
    bary_l2 = A.dot(weights)

    # wasserstein
    reg = 1e-3
    ot.tic()
    bary_wass = ot.bregman.barycenter(A, M, reg, weights)
    ot.toc()


    ot.tic()
    bary_wass2 = ot.lp.barycenter(A, M, weights, solver='interior-point', verbose=True)
    ot.toc()

    pl.figure(2)
    pl.clf()
    pl.subplot(2, 1, 1)
    for i in range(n_distributions):
        pl.plot(x, A[:, i])
    pl.title('Distributions')

    pl.subplot(2, 1, 2)
    pl.plot(x, bary_l2, 'r', label='l2')
    pl.plot(x, bary_wass, 'g', label='Reg Wasserstein')
    pl.plot(x, bary_wass2, 'b', label='LP Wasserstein')
    pl.legend()
    pl.title('Barycenters')
    pl.tight_layout()

    problems.append([A, [bary_l2, bary_wass, bary_wass2]])




.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_002.png
   :alt: Distributions, Barycenters
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time : 0.003335237503051758 s
    Primal Feasibility  Dual Feasibility    Duality Gap         Step             Path Parameter      Objective          
    1.0                 1.0                 1.0                 -                1.0                 1700.336700337      
    0.006776453137633   0.006776453137634   0.006776453137633   0.9932238647293  0.006776453137633   125.6700527543      
    0.004018712867874   0.004018712867874   0.004018712867874   0.4301142633     0.004018712867874   12.26594150092      
    0.001172775061627   0.001172775061627   0.001172775061627   0.7599932455028  0.001172775061627   0.3378536968897     
    0.0004375137005385  0.0004375137005385  0.0004375137005385  0.6422331807989  0.0004375137005385  0.1468420566358     
    0.000232669046734   0.0002326690467341  0.000232669046734   0.5016999460893  0.000232669046734   0.09381703231432    
    7.430121674303e-05  7.430121674303e-05  7.430121674303e-05  0.7035962305812  7.430121674303e-05  0.0577787025717     
    5.321227838882e-05  5.321227838879e-05  5.321227838882e-05  0.3087841864401  5.321227838882e-05  0.05266249477204    
    1.990900379202e-05  1.990900379201e-05  1.990900379202e-05  0.6520472013245  1.990900379202e-05  0.0452605440552     
    6.305442046817e-06  6.30544204679e-06   6.305442046812e-06  0.7073953304073  6.305442046809e-06  0.04237597591383    
    2.290148391578e-06  2.290148391587e-06  2.290148391592e-06  0.6941812711476  2.290148391602e-06  0.041522849321      
    1.182864875418e-06  1.182864875486e-06  1.182864875459e-06  0.508455204664   1.182864875475e-06  0.04129461872827    
    3.626786380237e-07  3.626786380498e-07  3.626786380591e-07  0.7101651574148  3.626786380499e-07  0.04113032448919    
    1.53975423377e-07   1.539754239097e-07  1.539754238957e-07  0.627932209399   1.539754244458e-07  0.04108867636364    
    5.193221588102e-08  5.193221525716e-08  5.193221527893e-08  0.6843453372866  5.193221744194e-08  0.04106859618425    
    1.888204557375e-08  1.888204466916e-08  1.888204464386e-08  0.6673444754752  1.888205403e-08     0.04106214175154    
    5.676851456731e-09  5.676853754852e-09  5.676853775137e-09  0.7281705629265  5.676886118764e-09  0.04105958648699    
    3.50115020171e-09   3.501137125386e-09  3.501137136515e-09  0.4140221641718  3.501151490466e-09  0.04105916265115    
    1.110591805675e-09  1.110570750049e-09  1.110570733855e-09  0.699900032435   1.110619438659e-09  0.04105870073191    
    5.770990264961e-10  5.776274527894e-10  5.776273877079e-10  0.4996170321381  5.772744208187e-10  0.04105859774172    
    1.536197932746e-10  1.538885612866e-10  1.538885001653e-10  0.7515062666584  1.537834631178e-10  0.04105851682752    
    6.743041081423e-11  6.740002462354e-11  6.740001907827e-11  0.5949277749653  6.73465642858e-11   0.04105850033226    
    1.794231989236e-11  1.747423074042e-11  1.747429829833e-11  0.7557701998162  1.741755335329e-11  0.04105849090303    
    Optimization terminated successfully.
             Current function value: 0.041058    
             Iterations: 22
    Elapsed time : 3.2997946739196777 s




.. GENERATED FROM PYTHON SOURCE LINES 107-109

Stair Data
----------

.. GENERATED FROM PYTHON SOURCE LINES 111-127

.. code-block:: default


    a1 = 1.0 * (x > 10) * (x < 50)
    a2 = 1.0 * (x > 60) * (x < 80)

    a1 /= a1.sum()
    a2 /= a2.sum()

    # creating matrix A containing all distributions
    A = np.vstack((a1, a2)).T
    n_distributions = A.shape[1]

    # loss matrix + normalization
    M = ot.utils.dist0(n)
    M /= M.max()









.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. code-block:: default


    pl.figure(1, figsize=(6.4, 3))
    for i in range(n_distributions):
        pl.plot(x, A[:, i])
    pl.title('Distributions')
    pl.tight_layout()





.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_003.png
   :alt: Distributions
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 137-174

.. code-block:: default


    alpha = 0.5  # 0<=alpha<=1
    weights = np.array([1 - alpha, alpha])

    # l2bary
    bary_l2 = A.dot(weights)

    # wasserstein
    reg = 1e-3
    ot.tic()
    bary_wass = ot.bregman.barycenter(A, M, reg, weights)
    ot.toc()


    ot.tic()
    bary_wass2 = ot.lp.barycenter(A, M, weights, solver='interior-point', verbose=True)
    ot.toc()


    problems.append([A, [bary_l2, bary_wass, bary_wass2]])

    pl.figure(2)
    pl.clf()
    pl.subplot(2, 1, 1)
    for i in range(n_distributions):
        pl.plot(x, A[:, i])
    pl.title('Distributions')

    pl.subplot(2, 1, 2)
    pl.plot(x, bary_l2, 'r', label='l2')
    pl.plot(x, bary_wass, 'g', label='Reg Wasserstein')
    pl.plot(x, bary_wass2, 'b', label='LP Wasserstein')
    pl.legend()
    pl.title('Barycenters')
    pl.tight_layout()





.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_004.png
   :alt: Distributions, Barycenters
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time : 0.004566669464111328 s
    Primal Feasibility  Dual Feasibility    Duality Gap         Step             Path Parameter      Objective          
    1.0                 1.0                 1.0                 -                1.0                 1700.336700337      
    0.006776466288967   0.006776466288967   0.006776466288967   0.9932238515788  0.006776466288968   125.6649255808      
    0.004036918865497   0.004036918865497   0.004036918865497   0.4272973099314  0.004036918865497   12.34716170111      
    0.001219232687069   0.001219232687069   0.001219232687069   0.7496986855994  0.001219232687069   0.3243835647407     
    0.0003837422984427  0.0003837422984427  0.0003837422984427  0.6926882608286  0.0003837422984427  0.1361719397492     
    0.0001070128410182  0.0001070128410182  0.0001070128410182  0.7643889137854  0.0001070128410182  0.07581952832515    
    0.0001001275033711  0.000100127503371   0.0001001275033711  0.07058704837782 0.0001001275033711  0.07347394936348    
    4.550897507833e-05  4.550897507832e-05  4.550897507833e-05  0.5761172484836  4.550897507833e-05  0.05555077655044    
    8.557124125502e-06  8.557124125495e-06  8.557124125502e-06  0.8535925441154  8.557124125503e-06  0.0443981466022     
    3.611995628362e-06  3.611995628359e-06  3.611995628375e-06  0.6002277331592  3.611995628377e-06  0.04283007762151    
    7.590393750322e-07  7.59039375014e-07   7.590393750355e-07  0.822148653339   7.590393750361e-07  0.04192322976247    
    8.299929287269e-08  8.299929283142e-08  8.299929287457e-08  0.9017467938803  8.299929287509e-08  0.04170825633295    
    3.117560215317e-10  3.117560474123e-10  3.117560204434e-10  0.9970399692198  3.117560202277e-10  0.04168179329766    
    1.559775055372e-14  1.561428379782e-14  1.559760203488e-14  0.9999499685222  1.559752674386e-14  0.04168169240444    
    Optimization terminated successfully.
             Current function value: 0.041682    
             Iterations: 13
    Elapsed time : 2.4564435482025146 s




.. GENERATED FROM PYTHON SOURCE LINES 175-177

Dirac Data
----------

.. GENERATED FROM PYTHON SOURCE LINES 179-201

.. code-block:: default


    a1 = np.zeros(n)
    a2 = np.zeros(n)

    a1[10] = .25
    a1[20] = .5
    a1[30] = .25
    a2[80] = 1


    a1 /= a1.sum()
    a2 /= a2.sum()

    # creating matrix A containing all distributions
    A = np.vstack((a1, a2)).T
    n_distributions = A.shape[1]

    # loss matrix + normalization
    M = ot.utils.dist0(n)
    M /= M.max()









.. GENERATED FROM PYTHON SOURCE LINES 202-210

.. code-block:: default


    pl.figure(1, figsize=(6.4, 3))
    for i in range(n_distributions):
        pl.plot(x, A[:, i])
    pl.title('Distributions')
    pl.tight_layout()





.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_005.png
   :alt: Distributions
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 211-248

.. code-block:: default


    alpha = 0.5  # 0<=alpha<=1
    weights = np.array([1 - alpha, alpha])

    # l2bary
    bary_l2 = A.dot(weights)

    # wasserstein
    reg = 1e-3
    ot.tic()
    bary_wass = ot.bregman.barycenter(A, M, reg, weights)
    ot.toc()


    ot.tic()
    bary_wass2 = ot.lp.barycenter(A, M, weights, solver='interior-point', verbose=True)
    ot.toc()


    problems.append([A, [bary_l2, bary_wass, bary_wass2]])

    pl.figure(2)
    pl.clf()
    pl.subplot(2, 1, 1)
    for i in range(n_distributions):
        pl.plot(x, A[:, i])
    pl.title('Distributions')

    pl.subplot(2, 1, 2)
    pl.plot(x, bary_l2, 'r', label='l2')
    pl.plot(x, bary_wass, 'g', label='Reg Wasserstein')
    pl.plot(x, bary_wass2, 'b', label='LP Wasserstein')
    pl.legend()
    pl.title('Barycenters')
    pl.tight_layout()





.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_006.png
   :alt: Distributions, Barycenters
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time : 0.0009682178497314453 s
    Primal Feasibility  Dual Feasibility    Duality Gap         Step             Path Parameter      Objective          
    1.0                 1.0                 1.0                 -                1.0                 1700.336700337      
    0.006774675520687   0.006774675520687   0.006774675520687   0.9932256422636  0.006774675520687   125.6956034733      
    0.002048208707529   0.002048208707529   0.002048208707529   0.7343095368176  0.002048208707529   5.213991622021      
    0.0002697365474824  0.0002697365474824  0.0002697365474824  0.8839403501148  0.0002697365474824  0.5059383903968     
    6.832109993819e-05  6.832109993818e-05  6.832109993819e-05  0.7601171076044  6.832109993818e-05  0.2339657807265     
    2.437682932226e-05  2.437682932226e-05  2.437682932226e-05  0.6663448297416  2.437682932226e-05  0.1471256246326     
    1.134983216297e-05  1.134983216299e-05  1.134983216297e-05  0.5553643816468  1.134983216297e-05  0.1181584941169     
    3.342312725774e-06  3.342312725781e-06  3.342312725774e-06  0.723813357168   3.342312725774e-06  0.1006387519744     
    7.078561231268e-07  7.078561231235e-07  7.078561231266e-07  0.8033142552548  7.078561231266e-07  0.09474734646262    
    1.966870958108e-07  1.966870953918e-07  1.966870953989e-07  0.7525479178458  1.966870954248e-07  0.09354342735761    
    4.199895240123e-10  4.199895384126e-10  4.199895235332e-10  0.9984019849396  4.199895236104e-10  0.0931036778586     
    2.1017793609e-14    2.101768735229e-14  2.101780822184e-14  0.9999499563876  2.101780420221e-14  0.0931027446646     
    Optimization terminated successfully.
             Current function value: 0.093103    
             Iterations: 11
    Elapsed time : 2.465721368789673 s




.. GENERATED FROM PYTHON SOURCE LINES 249-252

Final figure
------------


.. GENERATED FROM PYTHON SOURCE LINES 254-289

.. code-block:: default


    nbm = len(problems)
    nbm2 = (nbm // 2)


    pl.figure(2, (20, 6))
    pl.clf()

    for i in range(nbm):

        A = problems[i][0]
        bary_l2 = problems[i][1][0]
        bary_wass = problems[i][1][1]
        bary_wass2 = problems[i][1][2]

        pl.subplot(2, nbm, 1 + i)
        for j in range(n_distributions):
            pl.plot(x, A[:, j])
        if i == nbm2:
            pl.title('Distributions')
        pl.xticks(())
        pl.yticks(())

        pl.subplot(2, nbm, 1 + i + nbm)

        pl.plot(x, bary_l2, 'r', label='L2 (Euclidean)')
        pl.plot(x, bary_wass, 'g', label='Reg Wasserstein')
        pl.plot(x, bary_wass2, 'b', label='LP Wasserstein')
        if i == nbm - 1:
            pl.legend()
        if i == nbm2:
            pl.title('Barycenters')

        pl.xticks(())
        pl.yticks(())



.. image-sg:: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_007.png
   :alt: Distributions, Barycenters
   :srcset: /auto_examples/barycenters/images/sphx_glr_plot_barycenter_lp_vs_entropic_007.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.604 seconds)


.. _sphx_glr_download_auto_examples_barycenters_plot_barycenter_lp_vs_entropic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_barycenter_lp_vs_entropic.py <plot_barycenter_lp_vs_entropic.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_barycenter_lp_vs_entropic.ipynb <plot_barycenter_lp_vs_entropic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
